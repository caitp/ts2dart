/// <reference path="../typings/mocha/mocha.d.ts"/>
var chai = require('chai');
var main = require('../lib/main');
var module_1 = require('../lib/module');
var facade_converter_1 = require('../lib/facade_converter');
var test_support_1 = require('./test_support');
describe('imports', function () {
    it('translates import equals statements', function () {
        test_support_1.expectTranslate('import x = require("y");').to.equal(' import "package:y.dart" as x ;');
    });
    it('translates import from statements', function () {
        test_support_1.expectTranslate('import {x,y} from "z";').to.equal(' import "package:z.dart" show x , y ;');
    });
    it('translates import star', function () {
        test_support_1.expectTranslate('import * as foo from "z";').to.equal(' import "package:z.dart" as foo ;');
    });
    it('allows import dart file from relative path', function () {
        test_support_1.expectTranslate('import x = require("./y")').to.equal(' import "y.dart" as x ;');
        test_support_1.expectTranslate('import {x} from "./y"').to.equal(' import "y.dart" show x ;');
        test_support_1.expectTranslate('import {x} from "../y"').to.equal(' import "../y.dart" show x ;');
    });
    it('handles ignored annotations in imports', function () {
        test_support_1.expectTranslate('import {CONST, CONST_EXPR, IMPLEMENTS, ABSTRACT} from "x"').to.equal('');
        test_support_1.expectTranslate('import {x, IMPLEMENTS} from "./x"').to.equal(' import "x.dart" show x ;');
    });
    it('fails for renamed imports', function () {
        test_support_1.expectErroneousCode('import {Foo as Bar} from "baz";')
            .to.throw(/import\/export renames are unsupported in Dart/);
    });
    it('fails for empty import specs', function () { test_support_1.expectErroneousCode('import {} from "baz";').to.throw(/empty import list/); });
});
describe('exports', function () {
    // Dart exports are implicit, everything non-private is exported by the library.
    it('allows variable exports', function () { test_support_1.expectTranslate('export var x = 12;').to.equal(' var x = 12 ;'); });
    it('allows class exports', function () { test_support_1.expectTranslate('export class X {}').to.equal(' class X { }'); });
    it('allows export declarations', function () { test_support_1.expectTranslate('export * from "X";').to.equal(' export "package:X.dart" ;'); });
    it('allows export declarations', function () { test_support_1.expectTranslate('export * from "./X";').to.equal(' export "X.dart" ;'); });
    it('allows named export declarations', function () {
        test_support_1.expectTranslate('export {a, b} from "X";').to.equal(' export "package:X.dart" show a , b ;');
    });
    it('fails for renamed exports', function () {
        test_support_1.expectErroneousCode('export {Foo as Bar} from "baz";')
            .to.throw(/import\/export renames are unsupported in Dart/);
    });
    it('fails for exports without URLs', function () {
        test_support_1.expectErroneousCode('export {a as b};').to.throw('re-exports must have a module URL');
    });
    it('fails for empty export specs', function () { test_support_1.expectErroneousCode('export {} from "baz";').to.throw(/empty export list/); });
});
describe('library name', function () {
    var transpiler;
    var modTranspiler;
    beforeEach(function () {
        transpiler = new main.Transpiler({ failFast: true, generateLibraryName: true, basePath: '/a' });
        modTranspiler = new module_1["default"](transpiler, new facade_converter_1.FacadeConverter(transpiler), true);
    });
    it('adds a library name', function () {
        var results = test_support_1.translateSources({ '/a/b/c.ts': 'var x;' }, { failFast: true, generateLibraryName: true, basePath: '/a' });
        chai.expect(results['/a/b/c.ts']).to.equal(' library b.c ; var x ;');
    });
    it('leaves relative paths alone', function () { chai.expect(modTranspiler.getLibraryName('a/b')).to.equal('a.b'); });
    it('handles reserved words', function () {
        chai.expect(modTranspiler.getLibraryName('/a/for/in/do/x')).to.equal('_for._in._do.x');
    });
    it('handles built-in and limited keywords', function () {
        chai.expect(modTranspiler.getLibraryName('/a/as/if/sync/x')).to.equal('as._if.sync.x');
    });
    it('handles file extensions', function () {
        chai.expect(modTranspiler.getLibraryName('a/x.ts')).to.equal('a.x');
        chai.expect(modTranspiler.getLibraryName('a/x.js')).to.equal('a.x');
    });
    it('handles non word characters', function () { chai.expect(modTranspiler.getLibraryName('a/%x.ts')).to.equal('a._x'); });
});

//# sourceMappingURL=data:application/json;base64,