/// <reference path="../typings/mocha/mocha.d.ts"/>
var test_support_1 = require('./test_support');
function expectTranslates(cases) {
    for (var tsCode in cases) {
        test_support_1.expectTranslate(tsCode).to.equal(cases[tsCode]);
    }
}
describe('expressions', function () {
    it('does math', function () {
        expectTranslates({
            '1 + 2': ' 1 + 2 ;',
            '1 - 2': ' 1 - 2 ;',
            '1 * 2': ' 1 * 2 ;',
            '1 / 2': ' 1 / 2 ;',
            '1 % 2': ' 1 % 2 ;',
            'x++': ' x ++ ;',
            'x--': ' x -- ;',
            '++x': ' ++ x ;',
            '--x': ' -- x ;',
            '-x': ' - x ;'
        });
    });
    it('assigns', function () {
        expectTranslates({
            'x += 1': ' x += 1 ;',
            'x -= 1': ' x -= 1 ;',
            'x *= 1': ' x *= 1 ;',
            'x /= 1': ' x /= 1 ;',
            'x %= 1': ' x %= 1 ;',
            'x <<= 1': ' x <<= 1 ;',
            'x >>= 1': ' x >>= 1 ;',
            'x >>>= 1': ' x >>>= 1 ;',
            'x &= 1': ' x &= 1 ;',
            'x ^= 1': ' x ^= 1 ;',
            'x |= 1': ' x |= 1 ;'
        });
    });
    it('compares', function () {
        expectTranslates({
            '1 == 2': ' 1 == 2 ;',
            '1 != 2': ' 1 != 2 ;',
            '1 > 2': ' 1 > 2 ;',
            '1 < 2': ' 1 < 2 ;',
            '1 >= 2': ' 1 >= 2 ;',
            '1 <= 2': ' 1 <= 2 ;'
        });
    });
    it('compares identity', function () {
        test_support_1.expectTranslate('1 === 2').to.equal(' identical ( 1 , 2 ) ;');
        test_support_1.expectTranslate('1 !== 2').to.equal(' ! identical ( 1 , 2 ) ;');
    });
    it('bit fiddles', function () {
        expectTranslates({
            '1 & 2': ' 1 & 2 ;',
            '1 | 2': ' 1 | 2 ;',
            '1 ^ 2': ' 1 ^ 2 ;',
            '~ 1': ' ~ 1 ;',
            '1 << 2': ' 1 << 2 ;',
            '1 >> 2': ' 1 >> 2 ;',
            '1 >>> 2': ' 1 >>> 2 ;'
        });
    });
    it('translates logic', function () {
        expectTranslates({
            '1 && 2': ' 1 && 2 ;',
            '1 || 2': ' 1 || 2 ;',
            '!1': ' ! 1 ;'
        });
    });
    it('translates ternary', function () { test_support_1.expectTranslate('1 ? 2 : 3').to.equal(' 1 ? 2 : 3 ;'); });
    it('translates the comma operator', function () { test_support_1.expectTranslate('1 , 2').to.equal(' 1 , 2 ;'); });
    it('translates "in"', function () { test_support_1.expectTranslate('1 in 2').to.equal(' 1 in 2 ;'); });
    it('translates "instanceof"', function () { test_support_1.expectTranslate('1 instanceof 2').to.equal(' 1 is 2 ;'); });
    it('translates "this"', function () { test_support_1.expectTranslate('this.x').to.equal(' this . x ;'); });
    it('translates "delete"', function () { test_support_1.expectErroneousCode('delete x[y];').to.throw('delete operator is unsupported'); });
    it('translates "typeof"', function () { test_support_1.expectErroneousCode('typeof x;').to.throw('typeof operator is unsupported'); });
    it('translates "void"', function () { test_support_1.expectErroneousCode('void x;').to.throw('void operator is unsupported'); });
    it('translates parens', function () { test_support_1.expectTranslate('(1)').to.equal(' ( 1 ) ;'); });
    it('translates property paths', function () {
        test_support_1.expectTranslate('foo.bar;').to.equal(' foo . bar ;');
        test_support_1.expectTranslate('foo[bar];').to.equal(' foo [ bar ] ;');
    });
});

//# sourceMappingURL=data:application/json;base64,