/// <reference path="../typings/chai/chai.d.ts"/>
/// <reference path="../typings/mocha/mocha.d.ts"/>
/// <reference path="../typings/source-map/source-map.d.ts"/>
var SourceMap = require('source-map');
var chai = require('chai');
var main = require('../lib/main');
var test_support_1 = require('./test_support');
describe('main transpiler functionality', function () {
    describe('comments', function () {
        it('keeps leading comments', function () {
            test_support_1.expectTranslate('/* A */ a\n /* B */ b').to.equal('\n /* A */ a ;\n /* B */ b ;');
            test_support_1.expectTranslate('// A\na\n// B\nb').to.equal('\n // A\n a ;\n // B\n b ;');
        });
        it('keeps ctor comments', function () {
            test_support_1.expectTranslate('/** A */ class A {\n /** ctor */ constructor() {}}')
                .to.equal('\n /** A */ class A {\n /** ctor */ A ( ) { } }');
        });
    });
    describe('errors', function () {
        it('reports multiple errors', function () {
            // Reports both the private field not having an underbar and protected being unsupported.
            var errorLines = new RegExp('delete operator is unsupported\n' +
                '.*void operator is unsupported');
            test_support_1.expectErroneousCode('delete x["y"]; void z;').to.throw(errorLines);
        });
        it('reports relative paths in errors', function () {
            chai.expect(function () { return test_support_1.expectTranslate({ '/a/b/c.ts': 'delete x["y"];' }, { basePath: '/a' }); })
                .to.throw(/^b\/c.ts:1/);
        });
        it('reports errors across multiple files', function () {
            test_support_1.expectErroneousCode({ 'a.ts': 'delete x["y"];', 'b.ts': 'delete x["y"];' }, { failFast: false })
                .to.throw(/^a\.ts.*\nb\.ts/);
        });
    });
    describe('output paths', function () {
        it('writes within the path', function () {
            var transpiler = new main.Transpiler({ basePath: '/a' });
            chai.expect(transpiler.getOutputPath('/a/b/c.js', '/x')).to.equal('/x/b/c.dart');
            chai.expect(transpiler.getOutputPath('b/c.js', '/x')).to.equal('/x/b/c.dart');
            chai.expect(transpiler.getOutputPath('b/c.js', 'x')).to.equal('x/b/c.dart');
            chai.expect(function () { return transpiler.getOutputPath('/outside/b/c.js', '/x'); })
                .to.throw(/must be located under base/);
        });
        it('defaults to writing to the same location', function () {
            var transpiler = new main.Transpiler({ basePath: undefined });
            chai.expect(transpiler.getOutputPath('/a/b/c.js', '/e')).to.equal('/a/b/c.dart');
            chai.expect(transpiler.getOutputPath('b/c.js', '')).to.equal('b/c.dart');
        });
        it('translates .es6, .ts, and .js', function () {
            var transpiler = new main.Transpiler({ basePath: undefined });
            ['a.js', 'a.ts', 'a.es6'].forEach(function (n) { chai.expect(transpiler.getOutputPath(n, '')).to.equal('a.dart'); });
        });
    });
    describe('source maps', function () {
        function translateWithSourceMap(source) {
            var results = test_support_1.translateSources({ '/absolute/path/test.ts': source }, { generateSourceMap: true, basePath: '/absolute/' });
            return results['/absolute/path/test.ts'];
        }
        it('generates a source map', function () {
            chai.expect(translateWithSourceMap('var x;'))
                .to.contain('//# sourceMappingURL=data:application/json;base64,');
        });
        it('maps locations', function () {
            var withMap = translateWithSourceMap('var xVar: number;\nvar yVar: string;');
            chai.expect(withMap).to.contain(' num xVar ; String yVar ;');
            var b64string = withMap.match(/sourceMappingURL=data:application\/json;base64,(.*)/)[1];
            var mapString = new Buffer(b64string, 'base64').toString();
            var consumer = new SourceMap.SourceMapConsumer(JSON.parse(mapString));
            var expectedColumn = ' num xVar ; String yVar ;'.indexOf('yVar') + 1;
            var pos = consumer.originalPositionFor({ line: 1, column: expectedColumn });
            chai.expect(pos).to.include({ line: 2, column: 4 });
            chai.expect(consumer.sourceContentFor('path/test.ts')).to.contain('yVar: string');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,