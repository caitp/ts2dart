/// <reference path="../typings/chai/chai.d.ts"/>
/// <reference path="../typings/mocha/mocha.d.ts"/>
/// <reference path="../typings/node/node.d.ts"/>
var chai = require('chai');
var fs = require('fs');
var main = require('../lib/main');
var ts = require('typescript');
function expectTranslate(tsCode, options) {
    if (options === void 0) { options = {}; }
    var result = translateSource(tsCode, options);
    return chai.expect(result);
}
exports.expectTranslate = expectTranslate;
function expectErroneousCode(tsCode, options) {
    if (options === void 0) { options = {}; }
    options.failFast = false; // Collect *all* errors.
    return chai.expect(function () { return translateSource(tsCode, options); });
}
exports.expectErroneousCode = expectErroneousCode;
var compilerOptions = main.COMPILER_OPTIONS;
var defaultLibName = ts.getDefaultLibFileName(compilerOptions);
var libSource = fs.readFileSync(ts.getDefaultLibFilePath(compilerOptions), 'utf-8');
var libSourceFile;
function parseFiles(nameToContent) {
    var result;
    var compilerHost = {
        getSourceFile: function (sourceName, languageVersion) {
            if (nameToContent.hasOwnProperty(sourceName)) {
                return ts.createSourceFile(sourceName, nameToContent[sourceName], compilerOptions.target, true);
            }
            if (sourceName === defaultLibName) {
                if (!libSourceFile) {
                    // Cache to avoid excessive test times.
                    libSourceFile = ts.createSourceFile(sourceName, libSource, compilerOptions.target, true);
                }
                return libSourceFile;
            }
            return undefined;
        },
        writeFile: function (name, text, writeByteOrderMark) { result = text; },
        getDefaultLibFileName: function () { return defaultLibName; },
        useCaseSensitiveFileNames: function () { return false; },
        getCanonicalFileName: function (filename) { return filename; },
        getCurrentDirectory: function () { return ''; },
        getNewLine: function () { return '\n'; }
    };
    // Create a program from inputs
    var entryPoints = Object.keys(nameToContent);
    var program = ts.createProgram(entryPoints, compilerOptions, compilerHost);
    if (program.getSyntacticDiagnostics().length > 0) {
        // Throw first error.
        var first = program.getSyntacticDiagnostics()[0];
        throw new Error(first.start + ": " + first.messageText + " in " + nameToContent[entryPoints[0]]);
    }
    return program;
}
exports.parseFiles = parseFiles;
function translateSources(contents, options) {
    if (options === void 0) { options = {}; }
    // Default to quick stack traces.
    if (!options.hasOwnProperty('failFast'))
        options.failFast = true;
    var namesToContent;
    if (typeof contents === 'string') {
        namesToContent = {};
        namesToContent['main.ts'] = contents;
    }
    else {
        namesToContent = contents;
    }
    var transpiler = new main.Transpiler(options);
    var program = parseFiles(namesToContent);
    return transpiler.translateProgram(program);
}
exports.translateSources = translateSources;
function translateSource(contents, options) {
    if (options === void 0) { options = {}; }
    var results = translateSources(contents, options);
    // Return the main outcome, from 'main.ts'.
    return results['main.ts'];
}
exports.translateSource = translateSource;

//# sourceMappingURL=data:application/json;base64,