{"version":3,"sources":["statement.ts"],"names":["StatementTranspiler","StatementTranspiler.constructor","StatementTranspiler.visitNode"],"mappings":"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AIA,CAACA;gBAClCA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;gBAClBA,IAAIA,CAACA,KAAKA,CAACA,MAAMA,CAACA,UAAUA,CAACA,CAACA;gBAC9BA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACfA,IAAIA,CAACA,KAAKA,CAACA,MAAMA,CAACA,aAAaA,CAACA,CAACA;gBACjCA,EAAEA,CAACA,CAACA,MAAMA,CAACA,aAAaA,CAACA,CAACA,CAACA;oBACzBA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;oBAClBA,IAAIA,CAACA,KAAKA,CAACA,MAAMA,CAACA,aAAaA,CAACA,CAACA;gBACnCA,CAACA;gBACDA,KAAKA,CAACA;YACRA,KAAKA,sBAA0BA;gBAC7BA,IAAIA,OAAOA,GAAoBA,IAAIA,CAACA;gBACpCA,IAAIA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBACnBA,EAAEA,CAACA,CAACA,OAAOA,CAACA,WAAWA,CAACA;oBAACA,IAAIA,CAACA,KAAKA,CAACA,OAAOA,CAACA,WAAWA,CAACA,CAACA;gBACzDA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACfA,EAAEA,CAACA,CAACA,OAAOA,CAACA,SAASA,CAACA;oBAACA,IAAIA,CAACA,KAAKA,CAACA,OAAOA,CAACA,SAASA,CAACA,CAACA;gBACrDA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACfA,EAAEA,CAACA,CAACA,OAAOA,CAACA,WAAWA,CAACA;oBAACA,IAAIA,CAACA,KAAKA,CAACA,OAAOA,CAACA,WAAWA,CAACA,CAACA;gBACzDA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACfA,IAAIA,CAACA,KAAKA,CAACA,OAAOA,CAACA,SAASA,CAACA,CAACA;gBAC9BA,KAAKA,CAACA;YACRA,KAAKA,wBAA4BA;gBAC/BA,2FAA2FA;gBAC3FA,iDAAiDA;oBAC7CA,SAASA,GAAsBA,IAAIA,CAACA;gBACxCA,IAAIA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBACnBA,EAAEA,CAACA,CAACA,SAASA,CAACA,WAAWA,CAACA;oBAACA,IAAIA,CAACA,KAAKA,CAACA,SAASA,CAACA,WAAWA,CAACA,CAACA;gBAC7DA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;gBAChBA,IAAIA,CAACA,KAAKA,CAACA,SAASA,CAACA,UAAUA,CAACA,CAACA;gBACjCA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACfA,IAAIA,CAACA,KAAKA,CAACA,SAASA,CAACA,SAASA,CAACA,CAACA;gBAChCA,KAAKA,CAACA;YACRA,KAAKA,wBAA4BA;gBAC/BA,IAAIA,SAASA,GAAsBA,IAAIA,CAACA;gBACxCA,IAAIA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;gBACrBA,IAAIA,CAACA,KAAKA,CAACA,SAASA,CAACA,UAAUA,CAACA,CAACA;gBACjCA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACfA,IAAIA,CAACA,KAAKA,CAACA,SAASA,CAACA,SAASA,CAACA,CAACA;gBAChCA,KAAKA,CAACA;YACRA,KAAKA,qBAAyBA;gBAC5BA,IAAIA,MAAMA,GAAmBA,IAAIA,CAACA;gBAClCA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;gBAChBA,IAAIA,CAACA,KAAKA,CAACA,MAAMA,CAACA,SAASA,CAACA,CAACA;gBAC7BA,IAAIA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;gBACrBA,IAAIA,CAACA,KAAKA,CAACA,MAAMA,CAACA,UAAUA,CAACA,CAACA;gBAC9BA,IAAIA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;gBACjBA,KAAKA,CAACA;YAERA,KAAKA,wBAA4BA;gBAC/BA,IAAIA,SAASA,GAAsBA,IAAIA,CAACA;gBACxCA,IAAIA,sBAAsBA,GAAGA,IAAIA,CAACA,WAAWA,CAACA,SAASA,EAAEA,qBAAyBA,CAACA,CAACA;gBACpFA,EAAEA,CAACA,CAACA,sBAAsBA,CAACA,CAACA,CAACA;oBAC3BA,IAAIA,GAAGA,GAAoBA,sBAAuBA,CAACA,mBAAmBA,CAACA;oBACvEA,EAAEA,CAACA,CAACA,GAAGA,CAACA,OAAOA,EAAEA,KAAKA,SAASA,CAACA,UAAUA,CAACA,OAAOA,EAAEA,CAACA,CAACA,CAACA;wBACrDA,IAAIA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;wBACrBA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;wBACfA,KAAKA,CAACA;oBACRA,CAACA;gBACHA,CAACA;gBAEDA,IAAIA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBACnBA,IAAIA,CAACA,KAAKA,CAACA,SAASA,CAACA,UAAUA,CAACA,CAACA;gBACjCA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACfA,KAAKA,CAACA;YACRA,KAAKA,sBAA0BA;gBAC7BA,IAAIA,OAAOA,GAAoBA,IAAIA,CAACA;gBACpCA,IAAIA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;gBACjBA,IAAIA,CAACA,KAAKA,CAACA,OAAOA,CAACA,QAAQA,CAACA,CAACA;gBAC7BA,EAAEA,CAACA,CAACA,OAAOA,CAACA,WAAWA,CAACA,CAACA,CAACA;oBACxBA,IAAIA,CAACA,KAAKA,CAACA,OAAOA,CAACA,WAAWA,CAACA,CAACA;gBAClCA,CAACA;gBACDA,EAAEA,CAACA,CAACA,OAAOA,CAACA,YAAYA,CAACA,CAACA,CAACA;oBACzBA,IAAIA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;oBACrBA,IAAIA,CAACA,KAAKA,CAACA,OAAOA,CAACA,YAAYA,CAACA,CAACA;gBACnCA,CAACA;gBACDA,KAAKA,CAACA;YACRA,KAAKA,qBAAyBA;gBAC5BA,IAAIA,IAAIA,GAAmBA,IAAIA,CAACA;gBAChCA,EAAEA,CAACA,CAACA,IAAIA,CAACA,mBAAmBA,CAACA,IAAIA,CAACA,CAACA,CAACA;oBAClCA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;oBAChBA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,mBAAmBA,CAACA,IAAIA,CAACA,CAACA;gBAC5CA,CAACA;gBACDA,IAAIA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBACnBA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACfA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,mBAAmBA,CAACA,IAAIA,CAACA,CAACA;gBAC1CA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACfA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,mBAAmBA,CAACA,IAAIA,CAACA,CAACA;gBAC1CA,IAAIA,CAACA,WAAWA,CAACA,QAAQA,CAACA,CAACA;gBAC3BA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACfA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;gBACvBA,KAAKA,CAACA;YAERA,KAAKA,eAAmBA;gBACtBA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACfA,IAAIA,CAACA,SAASA,CAAYA,IAAKA,CAACA,UAAUA,CAACA,CAACA;gBAC5CA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACfA,KAAKA,CAACA;YACRA;gBACEA,MAAMA,CAACA,KAAKA,CAACA;QACjBA,CAACA;QACDA,MAAMA,CAACA,IAAIA,CAACA;IACdA,CAACA;IACHF,0BAACA;AAADA,CA7JA,EAAkC,IAAI,CAAC,cAAc,EA6JpD;AAED,iBAAS,mBAAmB,CAAC","file":"statement.js","sourcesContent":["/// <reference path='../node_modules/typescript/bin/typescript.d.ts' />\nimport ts = require('typescript');\nimport base = require('./base');\nimport ts2dart = require('./main');\n\ntype ClassLike = ts.ClassDeclaration | ts.InterfaceDeclaration;\n\nclass StatementTranspiler extends base.TranspilerBase {\n  constructor(tr: ts2dart.Transpiler) { super(tr); }\n\n  visitNode(node: ts.Node): boolean {\n    switch (node.kind) {\n      case ts.SyntaxKind.EmptyStatement:\n        this.emit(';');\n        break;\n      case ts.SyntaxKind.ReturnStatement:\n        var retStmt = <ts.ReturnStatement>node;\n        this.emit('return');\n        if (retStmt.expression) this.visit(retStmt.expression);\n        this.emit(';');\n        break;\n      case ts.SyntaxKind.BreakStatement:\n      case ts.SyntaxKind.ContinueStatement:\n        var breakContinue = <ts.BreakOrContinueStatement>node;\n        this.emit(breakContinue.kind == ts.SyntaxKind.BreakStatement ? 'break' : 'continue');\n        if (breakContinue.label) this.visit(breakContinue.label);\n        this.emit(';');\n        break;\n      case ts.SyntaxKind.VariableStatement:\n        var variableStmt = <ts.VariableStatement>node;\n        this.visit(variableStmt.declarationList);\n        this.emit(';');\n        break;\n      case ts.SyntaxKind.ExpressionStatement:\n        var expr = <ts.ExpressionStatement>node;\n        this.visit(expr.expression);\n        this.emit(';');\n        break;\n      case ts.SyntaxKind.SwitchStatement:\n        var switchStmt = <ts.SwitchStatement>node;\n        this.emit('switch (');\n        this.visit(switchStmt.expression);\n        this.emit(')');\n        this.visit(switchStmt.caseBlock);\n        break;\n      case ts.SyntaxKind.CaseBlock:\n        this.emit('{');\n        this.visitEach((<ts.CaseBlock>node).clauses);\n        this.emit('}');\n        break;\n      case ts.SyntaxKind.CaseClause:\n        var caseClause = <ts.CaseClause>node;\n        this.emit('case');\n        this.visit(caseClause.expression);\n        this.emit(':');\n        this.visitEach(caseClause.statements);\n        break;\n      case ts.SyntaxKind.DefaultClause:\n        this.emit('default :');\n        this.visitEach((<ts.DefaultClause>node).statements);\n        break;\n      case ts.SyntaxKind.IfStatement:\n        var ifStmt = <ts.IfStatement>node;\n        this.emit('if (');\n        this.visit(ifStmt.expression);\n        this.emit(')');\n        this.visit(ifStmt.thenStatement);\n        if (ifStmt.elseStatement) {\n          this.emit('else');\n          this.visit(ifStmt.elseStatement);\n        }\n        break;\n      case ts.SyntaxKind.ForStatement:\n        var forStmt = <ts.ForStatement>node;\n        this.emit('for (');\n        if (forStmt.initializer) this.visit(forStmt.initializer);\n        this.emit(';');\n        if (forStmt.condition) this.visit(forStmt.condition);\n        this.emit(';');\n        if (forStmt.incrementor) this.visit(forStmt.incrementor);\n        this.emit(')');\n        this.visit(forStmt.statement);\n        break;\n      case ts.SyntaxKind.ForInStatement:\n        // TODO(martinprobst): Dart's for-in loops actually have different semantics, they are more\n        // like for-of loops, iterating over collections.\n        var forInStmt = <ts.ForInStatement>node;\n        this.emit('for (');\n        if (forInStmt.initializer) this.visit(forInStmt.initializer);\n        this.emit('in');\n        this.visit(forInStmt.expression);\n        this.emit(')');\n        this.visit(forInStmt.statement);\n        break;\n      case ts.SyntaxKind.WhileStatement:\n        var whileStmt = <ts.WhileStatement>node;\n        this.emit('while (');\n        this.visit(whileStmt.expression);\n        this.emit(')');\n        this.visit(whileStmt.statement);\n        break;\n      case ts.SyntaxKind.DoStatement:\n        var doStmt = <ts.DoStatement>node;\n        this.emit('do');\n        this.visit(doStmt.statement);\n        this.emit('while (');\n        this.visit(doStmt.expression);\n        this.emit(') ;');\n        break;\n\n      case ts.SyntaxKind.ThrowStatement:\n        var throwStmt = <ts.ThrowStatement>node;\n        var surroundingCatchClause = this.getAncestor(throwStmt, ts.SyntaxKind.CatchClause);\n        if (surroundingCatchClause) {\n          var ref = (<ts.CatchClause>surroundingCatchClause).variableDeclaration;\n          if (ref.getText() === throwStmt.expression.getText()) {\n            this.emit('rethrow');\n            this.emit(';');\n            break;\n          }\n        }\n\n        this.emit('throw');\n        this.visit(throwStmt.expression);\n        this.emit(';');\n        break;\n      case ts.SyntaxKind.TryStatement:\n        var tryStmt = <ts.TryStatement>node;\n        this.emit('try');\n        this.visit(tryStmt.tryBlock);\n        if (tryStmt.catchClause) {\n          this.visit(tryStmt.catchClause);\n        }\n        if (tryStmt.finallyBlock) {\n          this.emit('finally');\n          this.visit(tryStmt.finallyBlock);\n        }\n        break;\n      case ts.SyntaxKind.CatchClause:\n        var ctch = <ts.CatchClause>node;\n        if (ctch.variableDeclaration.type) {\n          this.emit('on');\n          this.visit(ctch.variableDeclaration.type);\n        }\n        this.emit('catch');\n        this.emit('(');\n        this.visit(ctch.variableDeclaration.name);\n        this.emit(',');\n        this.visit(ctch.variableDeclaration.name);\n        this.emitNoSpace('_stack');\n        this.emit(')');\n        this.visit(ctch.block);\n        break;\n\n      case ts.SyntaxKind.Block:\n        this.emit('{');\n        this.visitEach((<ts.Block>node).statements);\n        this.emit('}');\n        break;\n      default:\n        return false;\n    }\n    return true;\n  }\n}\n\nexport = StatementTranspiler;\n"],"sourceRoot":"/source/"}