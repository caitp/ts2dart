{"version":3,"sources":["declaration.ts"],"names":["DeclarationTranspiler","DeclarationTranspiler.constructor","DeclarationTranspiler.visitNode","DeclarationTranspiler.visitVariableDeclarationType","DeclarationTranspiler.visitFunctionLike","DeclarationTranspiler.visitParameters","DeclarationTranspiler.visitProperty","DeclarationTranspiler.visitClassLike","DeclarationTranspiler.getImplementsDecorators","DeclarationTranspiler.visitDecorators","DeclarationTranspiler.visitDeclarationMetadata","DeclarationTranspiler.visitNamedParameter","DeclarationTranspiler.visitFunctionTypedefInterface"],"mappings":"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CA;gBAC9CA,6EAA6EA;gBAC7EA,gEAAgEA;gBAChEA,EAAEA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,SAASA,CAACA,SAASA,EAAEA,eAAmBA,CAACA;oBACtDA,IAAIA,CAACA,OAAOA,CAACA,SAASA,CAACA,SAASA,EAAEA,gBAAoBA,CAACA;oBACvDA,IAAIA,CAACA,OAAOA,CAACA,SAASA,CAACA,SAASA,EAAEA,kBAAsBA,CAACA,CAACA,CAACA,CAACA;oBAC9DA,IAAIA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;oBACpBA,IAAIA,CAACA,KAAKA,CAACA,SAASA,CAACA,IAAIA,CAACA,CAACA;oBAC3BA,EAAEA,CAACA,CAACA,SAASA,CAACA,WAAWA,CAACA,CAACA,CAACA;wBAC1BA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;wBACfA,IAAIA,CAACA,KAAKA,CAACA,SAASA,CAACA,WAAWA,CAACA,CAACA;oBACpCA,CAACA;oBACDA,KAAKA,CAACA;gBACRA,CAACA;gBACDA,EAAEA,CAACA,CAACA,SAASA,CAACA,cAAcA,CAACA;oBAACA,IAAIA,CAACA,WAAWA,CAACA,IAAIA,EAAEA,iCAAiCA,CAACA,CAACA;gBACxFA,EAAEA,CAACA,CAACA,SAASA,CAACA,IAAIA,CAACA,IAAIA,KAAKA,8BAAkCA,CAACA,CAACA,CAACA;oBAC/DA,IAAIA,CAACA,mBAAmBA,CAACA,SAASA,CAACA,CAACA;oBACpCA,KAAKA,CAACA;gBACRA,CAACA;gBACDA,IAAIA,CAACA,eAAeA,CAACA,SAASA,CAACA,UAAUA,CAACA,CAACA;gBAC3CA,EAAEA,CAACA,CAACA,SAASA,CAACA,IAAIA,CAACA;oBAACA,IAAIA,CAACA,KAAKA,CAACA,SAASA,CAACA,IAAIA,CAACA,CAACA;gBAC/CA,IAAIA,CAACA,KAAKA,CAACA,SAASA,CAACA,IAAIA,CAACA,CAACA;gBAC3BA,EAAEA,CAACA,CAACA,SAASA,CAACA,WAAWA,CAACA,CAACA,CAACA;oBAC1BA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;oBACfA,IAAIA,CAACA,KAAKA,CAACA,SAASA,CAACA,WAAWA,CAACA,CAACA;gBACpCA,CAACA;gBACDA,KAAKA,CAACA;YACRA,KAAKA,8BAAkCA;gBACrCA,IAAIA,cAAcA,GAAsBA,IAAIA,CAACA;gBAC7CA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACfA,IAAIA,CAACA,SAASA,CAACA,cAAcA,CAACA,QAAQA,CAACA,CAACA;gBACxCA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACfA,KAAKA,CAACA;YACRA,KAAKA,wBAA4BA;gBAC/BA,IAAIA,cAAcA,GAAsBA,IAAIA,CAACA;gBAC7CA,IAAIA,CAACA,KAAKA,CAACA,cAAcA,CAACA,IAAIA,CAACA,CAACA;gBAChCA,EAAEA,CAACA,CAACA,cAAcA,CAACA,WAAWA,CAACA,CAACA,CAACA;oBAC/BA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;oBACfA,IAAIA,CAACA,KAAKA,CAACA,cAAcA,CAACA,WAAWA,CAACA,CAACA;gBACzCA,CAACA;gBACDA,KAAKA,CAACA;YAERA,KAAKA,uBAA2BA;gBAC9BA,IAAIA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBACpBA,KAAKA,CAACA;YACRA,KAAKA,wBAA4BA;gBAC/BA,wDAAwDA;gBACxDA,KAAKA,CAACA;YACRA,KAAKA,0BAA8BA;gBACjCA,+CAA+CA;gBAC/CA,KAAKA,CAACA;YAERA;gBACEA,MAAMA,CAACA,KAAKA,CAACA;QACjBA,CAACA;QACDA,MAAMA,CAACA,IAAIA,CAACA;IACdA,CAACA;IAEOF,4DAA4BA,GAApCA,UAAqCA,OAA+BA;QAClEG;;;;;;;;;WASGA;YACCA,SAASA,GAAGA,OAAOA,CAACA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA;QAC/CA,IAAIA,GAAGA,GAAGA,2EAA2EA,CAACA;QACtFA,IAAIA,OAAOA,GAAGA,IAAIA,CAACA,OAAOA,CAACA,OAAOA,CAACA,MAAMA,EAAEA,gBAAkBA,CAACA,CAACA;QAC/DA,EAAEA,CAACA,CAACA,SAASA,KAAKA,OAAOA,CAACA,CAACA,CAACA;YAC1BA,EAAEA,CAACA,CAACA,OAAOA,CAACA;gBAACA,IAAIA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;YAChCA,EAAEA,CAACA,CAACA,CAACA,OAAOA,CAACA,IAAIA,CAACA,CAACA,CAACA;gBAClBA,EAAEA,CAACA,CAACA,CAACA,OAAOA,CAACA;oBAACA,IAAIA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACjCA,CAACA;YAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,OAAOA,CAACA,MAAMA,CAACA,YAAYA,CAACA,MAAMA,GAAGA,CAACA,CAACA,CAACA,CAACA;gBAClDA,IAAIA,CAACA,WAAWA,CAACA,OAAOA,EAAEA,GAAGA,CAACA,CAACA;YACjCA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACNA,IAAIA,CAACA,KAAKA,CAACA,OAAOA,CAACA,IAAIA,CAACA,CAACA;YAC3BA,CAACA;QACHA,CAACA;QAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,OAAOA,CAACA,IAAIA,CAACA,CAACA,CAACA;YACxBA,IAAIA,CAACA,WAAWA,CAACA,OAAOA,EAAEA,GAAGA,CAACA,CAACA;QACjCA,CAACA;IACHA,CAACA;IAEOH,iDAAiBA,GAAzBA,UAA0BA,EAA8BA,EAAEA,QAAiBA;QACzEI,EAAEA,CAACA,CAACA,EAAEA,CAACA,IAAIA,CAACA,CAACA,CAACA;YACZA,EAAEA,CAACA,CAACA,EAAEA,CAACA,IAAIA,KAAKA,uBAA2BA,CAACA,CAACA,CAACA;gBAC5CA,uEAAuEA;gBACvEA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;gBAChBA,IAAIA,CAACA,KAAKA,CAACA,EAAEA,CAACA,IAAIA,CAACA,CAACA;gBACpBA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YAClBA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACNA,IAAIA,CAACA,KAAKA,CAACA,EAAEA,CAACA,IAAIA,CAACA,CAACA;YACtBA,CAACA;QACHA,CAACA;QACDA,EAAEA,CAACA,CAACA,QAAQA,CAACA;YAACA,IAAIA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;QAClCA,EAAEA,CAACA,CAACA,EAAEA,CAACA,IAAIA,CAACA;YAACA,IAAIA,CAACA,KAAKA,CAACA,EAAEA,CAACA,IAAIA,CAACA,CAACA;QACjCA,uEAAuEA;QACvEA,EAAEA,CAACA,CAACA,QAAQA,KAAKA,KAAKA,CAACA,CAACA,CAACA;YACvBA,IAAIA,CAACA,eAAeA,CAACA,EAAEA,CAACA,UAAUA,CAACA,CAACA;QACtCA,CAACA;QAACA,IAAIA,CAACA,CAACA;YACNA,EAAEA,CAACA,CAACA,EAAEA,CAACA,UAAUA,IAAIA,EAAEA,CAACA,UAAUA,CAACA,MAAMA,GAAGA,CAACA,CAACA,CAACA,CAACA;gBAC9CA,IAAIA,CAACA,WAAWA,CAACA,EAAEA,EAAEA,qCAAqCA,CAACA,CAACA;YAC9DA,CAACA;QACHA,CAACA;QACDA,EAAEA,CAACA,CAACA,EAAEA,CAACA,IAAIA,CAACA,CAACA,CAACA;YACZA,IAAIA,CAACA,KAAKA,CAACA,EAAEA,CAACA,IAAIA,CAACA,CAACA;QACtBA,CAACA;QAACA,IAAIA,CAACA,CAACA;YACNA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;QACjBA,CAACA;IACHA,CAACA;IAEOJ,+CAAeA,GAAvBA,UAAwBA,UAAqCA;QAC3DK,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;QACfA,IAAIA,iBAAiBA,GAAGA,CAACA,CAACA;QAC1BA,GAAGA,CAACA,CAACA,EAAEA,iBAAiBA,GAAGA,UAAUA,CAACA,MAAMA,EAAEA,iBAAiBA,EAAEA,EAAEA,CAACA;YAClEA,gEAAgEA;gBAC5DA,KAAKA,GACLA,UAAUA,CAACA,iBAAiBA,CAACA,CAACA,WAAWA,IAAIA,UAAUA,CAACA,iBAAiBA,CAACA,CAACA,aAAaA,CAACA;YAC7FA,EAAEA,CAACA,CAACA,KAAKA,IAAIA,UAAUA,CAACA,iBAAiBA,CAACA,CAACA,IAAIA,CAACA,IAAIA,KAAKA,8BAAkCA,CAACA,CAACA,CAACA;gBAC5FA,KAAKA,CAACA;YACRA,CAACA;QACHA,CAACA;QAEDA,EAAEA,CAACA,CAACA,iBAAiBA,KAAKA,CAACA,CAACA,CAACA,CAACA;YAC5BA,IAAIA,cAAcA,GAAGA,UAAUA,CAACA,KAAKA,CAACA,CAACA,EAAEA,iBAAiBA,CAACA,CAACA;YAC5DA,IAAIA,CAACA,SAASA,CAACA,cAAcA,CAACA,CAACA;QACjCA,CAACA;QAEDA,EAAEA,CAACA,CAACA,iBAAiBA,KAAKA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA;YAC5CA,EAAEA,CAACA,CAACA,iBAAiBA,KAAKA,CAACA,CAACA;gBAACA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YAC5CA,IAAIA,kBAAkBA,GAAGA,UAAUA,CAACA,KAAKA,CAACA,iBAAiBA,EAAEA,UAAUA,CAACA,MAAMA,CAACA,CAACA;YAChFA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YACfA,IAAIA,CAACA,SAASA,CAACA,kBAAkBA,CAACA,CAACA;YACnCA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;QACjBA,CAACA;QAEDA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;IACjBA,CAACA;IAEDL;;;;OAIGA;IACKA,6CAAaA,GAArBA,UAAsBA,IAAsDA,EACtDA,WAA4BA;QAA5BM,2BAA4BA,GAA5BA,mBAA4BA;QAChDA,EAAEA,CAACA,CAACA,CAACA,WAAWA,CAACA;YAACA,IAAIA,CAACA,wBAAwBA,CAACA,IAAIA,CAACA,CAACA;QACtDA,IAAIA,eAAeA,GAAmBA,CAACA,WAAWA,GAAGA,IAAIA,CAACA,MAAMA,CAACA,MAAMA,GAAGA,IAAIA,CAACA,MAAMA,CAACA,CAACA;QACvFA,IAAIA,YAAYA,GAAGA,IAAIA,CAACA,aAAaA,CAACA,IAAIA,CAACA,UAAUA,EAAEA,OAAOA,CAACA,CAACA;QAChEA,EAAEA,CAACA,CAACA,YAAYA,CAACA,CAACA,CAACA;YACjBA,sBAAsBA;YACtBA,IAAIA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;QACrBA,CAACA;QAACA,IAAIA,CAACA,CAACA;YACNA,IAAIA,YAAYA,GAAGA,IAAIA,CAACA,OAAOA,CAACA,eAAeA,CAACA,CAACA;YACjDA,EAAEA,CAACA,CAACA,YAAYA,CAACA,CAACA,CAACA;gBACjBA,IAAIA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;YACrBA,CAACA;QACHA,CAACA;QACDA,EAAEA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA;YACdA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;QACxBA,CAACA;QAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,CAACA,YAAYA,IAAIA,CAACA,YAAYA,CAACA,CAACA,CAACA;YAC1CA,IAAIA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;QACnBA,CAACA;QACDA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;QACtBA,EAAEA,CAACA,CAACA,IAAIA,CAACA,WAAWA,IAAIA,CAACA,WAAWA,CAACA,CAACA,CAACA;YACrCA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YACfA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,WAAWA,CAACA,CAACA;QAC/BA,CAACA;QACDA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;IACjBA,CAACA;IAEON,8CAAcA,GAAtBA,UAAuBA,OAAeA,EAAEA,IAAoBA;QAA5DO,iBA+CCA;QA9CCA,IAAIA,CAACA,eAAeA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;QACtCA,IAAIA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAAC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UA,CAACA,CAACA;YACzCA,CAACA;YACDA,mDAAmDA;YACnDA,EAAEA,CAACA,CAACA,IAAIA,KAAKA,UAAUA,CAACA,CAACA,CAACA;gBACxBA,UAAUA,GAAGA,IAAIA,CAACA;gBAClBA,MAAMA,CAACA;YACTA,CAACA;YACDA,EAAEA,CAACA,CAACA,IAAIA,KAAKA,OAAOA,IAAIA,IAAIA,KAAKA,YAAYA,CAACA,CAACA,CAACA;gBAC9CA,4EAA4EA;gBAC5EA,gFAAgFA;gBAChFA,MAAMA,CAACA;YACTA,CAACA;YACDA,KAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YACfA,KAAIA,CAACA,KAAKA,CAACA,CAACA,CAACA,UAAUA,CAACA,CAACA;QAC3BA,CAACA,CAACA,CAACA;QACHA,EAAEA,CAACA,CAACA,UAAUA,CAACA;YAACA,IAAIA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;IACxCA,CAACA;IAEOT,wDAAwBA,GAAhCA,UAAiCA,IAAoBA;QACnDU,IAAIA,CAACA,eAAeA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;QACtCA,IAAIA,CAACA,kBAAkBA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;QAExCA,yEAAyEA;QACzEA,MAAMA,CAACA;QAEPA,EAAEA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,IAAIA,CAACA,SAASA,EAAEA,kBAAsBA,CAACA,CAACA,CAACA,CAACA;YACzDA,IAAIA,CAACA,WAAWA,CAACA,IAAIA,EAAEA,wCAAwCA,CAACA,CAACA;YACjEA,MAAMA,CAACA;QACTA,CAACA;QACDA,IAAIA,IAAIA,GAAGA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;QACjCA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA;YAACA,MAAMA,CAACA;QAClBA,IAAIA,SAASA,GAAGA,IAAIA,CAACA,OAAOA,CAACA,IAAIA,CAACA,SAASA,EAAEA,gBAAoBA,CAACA,CAACA;QACnEA,IAAIA,cAAcA,GAAGA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA;QACxCA,EAAEA,CAACA,CAACA,SAASA,IAAIA,CAACA,cAAcA,CAACA,CAACA,CAACA;YACjCA,IAAIA,CAACA,WAAWA,CAACA,IAAIA,EAAEA,2CAA2CA,CAACA,CAACA;QACtEA,CAACA;QACDA,EAAEA,CAACA,CAACA,CAACA,SAASA,IAAIA,cAAcA,CAACA,CAACA,CAACA;YACjCA,IAAIA,CAACA,WAAWA,CAACA,IAAIA,EAAEA,8CAA8CA,CAACA,CAACA;QACzEA,CAACA;IACHA,CAACA;IAEOV,mDAAmBA,GAA3BA,UAA4BA,SAAkCA;QAC5DW,IAAIA,CAACA,eAAeA,CAACA,SAASA,CAACA,UAAUA,CAACA,CAACA;QAC3CA,EAAEA,CAACA,CAACA,SAASA,CAACA,IAAIA,CAACA,CAACA,CAACA;QAGrBA,CAACA;QACDA,IAAIA,CAACA,KAAKA,CAACA,SAASA,CAACA,IAAIA,CAACA,CAACA;QAC3BA,EAAEA,CAACA,CAACA,SAASA,CAACA,WAAWA,CAACA,CAACA,CAACA;YAC1BA,EAAEA,CAACA,CAACA,SAASA,CAACA,WAAWA,CAACA,IAAIA,KAAKA,iCAAqCA;gBACvCA,SAASA,CAACA,WAAYA,CAACA,UAAUA,CAACA,MAAMA,GAAGA,CAACA,CAACA,CAACA,CAACA;gBAC9EA,IAAIA,CAACA,WAAWA,CAACA,SAASA,EACTA,iEAAiEA,CAACA,CAACA;YACtFA,CAACA;QACHA,CAACA;IACHA,CAACA;IAEDX;;;OAGGA;IACKA,6DAA6BA,GAArCA,UAAsCA,IAAYA,EAAEA,SAAkCA,EAChDA,cAAyDA;QAC7FY,IAAIA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;QACrBA,EAAEA,CAACA,CAACA,SAASA,CAACA,IAAIA,CAACA,CAACA,CAACA;YACnBA,IAAIA,CAACA,KAAKA,CAACA,SAASA,CAACA,IAAIA,CAACA,CAACA;QAC7BA,CAACA;QACDA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;QAChBA,EAAEA,CAACA,CAACA,cAAcA,CAACA,CAACA,CAACA;YACnBA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YACfA,IAAIA,CAACA,SAASA,CAACA,cAAcA,CAACA,CAACA;YAC/BA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;QACjBA,CAACA;QACDA,IAAIA,CAACA,eAAeA,CAACA,SAASA,CAACA,UAAUA,CAACA,CAACA;QAC3CA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;IACjBA,CAACA;IACHZ,4BAACA;AAADA,CAvdA,EAAoC,IAAI,CAAC,cAAc,EAudtD;AAED,iBAAS,qBAAqB,CAAC","file":"declaration.js","sourcesContent":["/// <reference path='../node_modules/typescript/bin/typescript.d.ts' />\nimport ts = require('typescript');\nimport base = require('./base');\nimport ts2dart = require('./main');\nimport {FacadeConverter} from './facade_converter';\n\nclass DeclarationTranspiler extends base.TranspilerBase {\n  constructor(tr: ts2dart.Transpiler, private fc: FacadeConverter) { super(tr); }\n\n  visitNode(node: ts.Node): boolean {\n    switch (node.kind) {\n      case ts.SyntaxKind.VariableDeclarationList:\n        // Note: VariableDeclarationList can only occur as part of a for loop.\n        var varDeclList = <ts.VariableDeclarationList>node;\n        this.visitList(varDeclList.declarations);\n        break;\n      case ts.SyntaxKind.VariableDeclaration:\n        var varDecl = <ts.VariableDeclaration>node;\n        this.visitVariableDeclarationType(varDecl);\n        this.visit(varDecl.name);\n        if (varDecl.initializer) {\n          this.emit('=');\n          this.visit(varDecl.initializer);\n        }\n        break;\n\n      case ts.SyntaxKind.ClassDeclaration:\n        var classDecl = <ts.ClassDeclaration>node;\n        this.visitClassLike('class', classDecl);\n        break;\n      case ts.SyntaxKind.InterfaceDeclaration:\n        var ifDecl = <ts.InterfaceDeclaration>node;\n        // Function type interface in an interface with a single declaration\n        // of a call signature (http://goo.gl/ROC5jN).\n        if (ifDecl.members.length === 1 && ifDecl.members[0].kind === ts.SyntaxKind.CallSignature) {\n          this.visitFunctionTypedefInterface(\n              ifDecl.name.text, <ts.SignatureDeclaration>ifDecl.members[0], ifDecl.typeParameters);\n        } else {\n          this.visitClassLike('abstract class', ifDecl);\n        }\n        break;\n      case ts.SyntaxKind.HeritageClause:\n        var heritageClause = <ts.HeritageClause>node;\n        if (heritageClause.token === ts.SyntaxKind.ExtendsKeyword) {\n          this.emit('extends');\n        } else {\n          this.emit('implements');\n        }\n        // Can only have one member for extends clauses.\n        this.visitList(heritageClause.types);\n        break;\n      case ts.SyntaxKind.ExpressionWithTypeArguments:\n        var exprWithTypeArgs = <ts.ExpressionWithTypeArguments>node;\n        this.visit(exprWithTypeArgs.expression);\n        this.maybeVisitTypeArguments(exprWithTypeArgs);\n        break;\n      case ts.SyntaxKind.EnumDeclaration:\n        var decl = <ts.EnumDeclaration>node;\n        // The only legal modifier for an enum decl is const.\n        var isConst = decl.modifiers && (decl.modifiers.flags & ts.NodeFlags.Const);\n        if (isConst) {\n          this.reportError(node, 'const enums are not supported');\n        }\n        this.emit('enum');\n        this.fc.visitTypeName(decl.name);\n        this.emit('{');\n        // Enums can be empty in TS ...\n        if (decl.members.length === 0) {\n          // ... but not in Dart.\n          this.reportError(node, 'empty enums are not supported');\n        }\n        this.visitList(decl.members);\n        this.emit('}');\n        break;\n      case ts.SyntaxKind.EnumMember:\n        var member = <ts.EnumMember>node;\n        this.visit(member.name);\n        if (member.initializer) {\n          this.reportError(node, 'enum initializers are not supported');\n        }\n        break;\n      case ts.SyntaxKind.Constructor:\n        var ctorDecl = <ts.ConstructorDeclaration>node;\n        // Find containing class name.\n        var className: ts.Identifier;\n        for (var parent = ctorDecl.parent; parent; parent = parent.parent) {\n          if (parent.kind == ts.SyntaxKind.ClassDeclaration) {\n            className = (<ts.ClassDeclaration>parent).name;\n            break;\n          }\n        }\n        if (!className) this.reportError(ctorDecl, 'cannot find outer class node');\n        this.visitDeclarationMetadata(ctorDecl);\n        if (this.isConst(<base.ClassLike>ctorDecl.parent)) {\n          this.emit('const');\n        }\n        this.visit(className);\n        this.visitParameters(ctorDecl.parameters);\n        this.visit(ctorDecl.body);\n        break;\n      case ts.SyntaxKind.PropertyDeclaration:\n        this.visitProperty(<ts.PropertyDeclaration>node);\n        break;\n      case ts.SyntaxKind.SemicolonClassElement:\n        // No-op, don't emit useless declarations.\n        break;\n      case ts.SyntaxKind.MethodDeclaration:\n        this.visitDeclarationMetadata(<ts.MethodDeclaration>node);\n        this.visitFunctionLike(<ts.MethodDeclaration>node);\n        break;\n      case ts.SyntaxKind.GetAccessor:\n        this.visitDeclarationMetadata(<ts.MethodDeclaration>node);\n        this.visitFunctionLike(<ts.AccessorDeclaration>node, 'get');\n        break;\n      case ts.SyntaxKind.SetAccessor:\n        this.visitDeclarationMetadata(<ts.MethodDeclaration>node);\n        this.visitFunctionLike(<ts.AccessorDeclaration>node, 'set');\n        break;\n      case ts.SyntaxKind.FunctionDeclaration:\n        var funcDecl = <ts.FunctionDeclaration>node;\n        this.visitDecorators(funcDecl.decorators);\n        if (funcDecl.typeParameters) this.reportError(node, 'generic functions are unsupported');\n        this.visitFunctionLike(funcDecl);\n        break;\n      case ts.SyntaxKind.ArrowFunction:\n        var arrowFunc = <ts.FunctionExpression>node;\n        // Dart only allows expressions following the fat arrow operator.\n        // If the body is a block, we have to drop the fat arrow and emit an\n        // anonymous function instead.\n        if (arrowFunc.body.kind == ts.SyntaxKind.Block) {\n          this.visitFunctionLike(arrowFunc);\n        } else {\n          this.visitParameters(arrowFunc.parameters);\n          this.emit('=>');\n          this.visit(arrowFunc.body);\n        }\n        break;\n      case ts.SyntaxKind.FunctionExpression:\n        var funcExpr = <ts.FunctionExpression>node;\n        this.visitFunctionLike(funcExpr);\n        break;\n      case ts.SyntaxKind.PropertySignature:\n        var propSig = <ts.PropertyDeclaration>node;\n        this.visitProperty(propSig);\n        break;\n      case ts.SyntaxKind.MethodSignature:\n        var methodSignatureDecl = <ts.FunctionLikeDeclaration>node;\n        this.visitEachIfPresent(methodSignatureDecl.modifiers);\n        this.visitFunctionLike(methodSignatureDecl);\n        break;\n      case ts.SyntaxKind.Parameter:\n        var paramDecl = <ts.ParameterDeclaration>node;\n        // Property parameters will have an explicit property declaration, so we just\n        // need the dart assignment shorthand to reference the property.\n        if (this.hasFlag(paramDecl.modifiers, ts.NodeFlags.Public) ||\n            this.hasFlag(paramDecl.modifiers, ts.NodeFlags.Private) ||\n            this.hasFlag(paramDecl.modifiers, ts.NodeFlags.Protected)) {\n          this.emit('this .');\n          this.visit(paramDecl.name);\n          if (paramDecl.initializer) {\n            this.emit('=');\n            this.visit(paramDecl.initializer);\n          }\n          break;\n        }\n        if (paramDecl.dotDotDotToken) this.reportError(node, 'rest parameters are unsupported');\n        if (paramDecl.name.kind === ts.SyntaxKind.ObjectBindingPattern) {\n          this.visitNamedParameter(paramDecl);\n          break;\n        }\n        this.visitDecorators(paramDecl.decorators);\n        if (paramDecl.type) this.visit(paramDecl.type);\n        this.visit(paramDecl.name);\n        if (paramDecl.initializer) {\n          this.emit('=');\n          this.visit(paramDecl.initializer);\n        }\n        break;\n      case ts.SyntaxKind.ObjectBindingPattern:\n        var bindingPattern = <ts.BindingPattern>node;\n        this.emit('{');\n        this.visitList(bindingPattern.elements);\n        this.emit('}');\n        break;\n      case ts.SyntaxKind.BindingElement:\n        var bindingElement = <ts.BindingElement>node;\n        this.visit(bindingElement.name);\n        if (bindingElement.initializer) {\n          this.emit(':');\n          this.visit(bindingElement.initializer);\n        }\n        break;\n\n      case ts.SyntaxKind.StaticKeyword:\n        this.emit('static');\n        break;\n      case ts.SyntaxKind.PrivateKeyword:\n        // no-op, handled through '_' naming convention in Dart.\n        break;\n      case ts.SyntaxKind.ProtectedKeyword:\n        // Handled in `visitDeclarationMetadata` below.\n        break;\n\n      default:\n        return false;\n    }\n    return true;\n  }\n\n  private visitVariableDeclarationType(varDecl: ts.VariableDeclaration) {\n    /* Note: VariableDeclarationList can only occur as part of a for loop. This helper method\n     * is meant for processing for-loop variable declaration types only.\n     *\n     * In Dart, all variables in a variable declaration list must have the same type. Since\n     * we are doing syntax directed translation, we cannot reliably determine if distinct\n     * variables are declared with the same type or not. Hence we support the following cases:\n     *\n     * - A variable declaration list with a single variable can be explicitly typed.\n     * - When more than one variable is in the list, all must be implicitly typed.\n     */\n    var firstDecl = varDecl.parent.declarations[0];\n    var msg = 'Variables in a declaration list of more than one variable cannot by typed';\n    var isConst = this.hasFlag(varDecl.parent, ts.NodeFlags.Const);\n    if (firstDecl === varDecl) {\n      if (isConst) this.emit('const');\n      if (!varDecl.type) {\n        if (!isConst) this.emit('var');\n      } else if (varDecl.parent.declarations.length > 1) {\n        this.reportError(varDecl, msg);\n      } else {\n        this.visit(varDecl.type);\n      }\n    } else if (varDecl.type) {\n      this.reportError(varDecl, msg);\n    }\n  }\n\n  private visitFunctionLike(fn: ts.FunctionLikeDeclaration, accessor?: string) {\n    if (fn.type) {\n      if (fn.kind === ts.SyntaxKind.ArrowFunction) {\n        // Type is silently dropped for arrow functions, not supported in Dart.\n        this.emit('/*');\n        this.visit(fn.type);\n        this.emit('*/');\n      } else {\n        this.visit(fn.type);\n      }\n    }\n    if (accessor) this.emit(accessor);\n    if (fn.name) this.visit(fn.name);\n    // Dart does not even allow the parens of an empty param list on getter\n    if (accessor !== 'get') {\n      this.visitParameters(fn.parameters);\n    } else {\n      if (fn.parameters && fn.parameters.length > 0) {\n        this.reportError(fn, 'getter should not accept parameters');\n      }\n    }\n    if (fn.body) {\n      this.visit(fn.body);\n    } else {\n      this.emit(';');\n    }\n  }\n\n  private visitParameters(parameters: ts.ParameterDeclaration[]) {\n    this.emit('(');\n    let firstInitParamIdx = 0;\n    for (; firstInitParamIdx < parameters.length; firstInitParamIdx++) {\n      // ObjectBindingPatterns are handled within the parameter visit.\n      let isOpt =\n          parameters[firstInitParamIdx].initializer || parameters[firstInitParamIdx].questionToken;\n      if (isOpt && parameters[firstInitParamIdx].name.kind !== ts.SyntaxKind.ObjectBindingPattern) {\n        break;\n      }\n    }\n\n    if (firstInitParamIdx !== 0) {\n      var requiredParams = parameters.slice(0, firstInitParamIdx);\n      this.visitList(requiredParams);\n    }\n\n    if (firstInitParamIdx !== parameters.length) {\n      if (firstInitParamIdx !== 0) this.emit(',');\n      var positionalOptional = parameters.slice(firstInitParamIdx, parameters.length);\n      this.emit('[');\n      this.visitList(positionalOptional);\n      this.emit(']');\n    }\n\n    this.emit(')');\n  }\n\n  /**\n   * Visit a property declaration.\n   * In the special case of property parameters in a constructor, we also allow a parameter to be\n   * emitted as a property.\n   */\n  private visitProperty(decl: ts.PropertyDeclaration | ts.ParameterDeclaration,\n                        isParameter: boolean = false) {\n    if (!isParameter) this.visitDeclarationMetadata(decl);\n    var containingClass = <base.ClassLike>(isParameter ? decl.parent.parent : decl.parent);\n    var isConstField = this.hasAnnotation(decl.decorators, 'CONST');\n    if (isConstField) {\n      // const implies final\n      this.emit('const');\n    } else {\n      var hasConstCtor = this.isConst(containingClass);\n      if (hasConstCtor) {\n        this.emit('final');\n      }\n    }\n    if (decl.type) {\n      this.visit(decl.type);\n    } else if (!isConstField && !hasConstCtor) {\n      this.emit('var');\n    }\n    this.visit(decl.name);\n    if (decl.initializer && !isParameter) {\n      this.emit('=');\n      this.visit(decl.initializer);\n    }\n    this.emit(';');\n  }\n\n  private visitClassLike(keyword: string, decl: base.ClassLike) {\n    this.visitDecorators(decl.decorators);\n    this.emit(keyword);\n    this.fc.visitTypeName(decl.name);\n    if (decl.typeParameters) {\n      this.emit('<');\n      this.visitList(decl.typeParameters);\n      this.emit('>');\n    }\n    this.visitEachIfPresent(decl.heritageClauses);\n    // Check for @IMPLEMENTS interfaces to add.\n    // TODO(martinprobst): Drop all special cases for @SOMETHING after migration to TypeScript.\n    var implIfs = this.getImplementsDecorators(decl.decorators);\n    if (implIfs.length > 0) {\n      // Check if we have to emit an 'implements ' or a ', '\n      if (decl.heritageClauses && decl.heritageClauses.length > 0 &&\n          decl.heritageClauses.some((hc) => hc.token === ts.SyntaxKind.ImplementsKeyword)) {\n        // There was some implements clause.\n        this.emit(',');\n      } else {\n        this.emit('implements');\n      }\n      this.emit(implIfs.join(' , '));\n    }\n    this.emit('{');\n\n    // Synthesize explicit properties for ctor with 'property parameters'\n    let synthesizePropertyParam = (param: ts.ParameterDeclaration) => {\n      if (this.hasFlag(param.modifiers, ts.NodeFlags.Public) ||\n          this.hasFlag(param.modifiers, ts.NodeFlags.Private) ||\n          this.hasFlag(param.modifiers, ts.NodeFlags.Protected)) {\n        // TODO: we should enforce the underscore prefix on privates\n        this.visitProperty(param, true);\n      }\n    };\n    decl.members.filter((m) => m.kind == ts.SyntaxKind.Constructor)\n        .forEach((ctor) =>\n                     (<ts.ConstructorDeclaration>ctor).parameters.forEach(synthesizePropertyParam));\n    this.visitEachIfPresent(decl.members);\n\n    // Generate a constructor to host the const modifier, if needed\n    if (this.isConst(decl) && !decl.members.some((m) => m.kind == ts.SyntaxKind.Constructor)) {\n      this.emit(\"const\");\n      this.fc.visitTypeName(decl.name);\n      this.emit(\"();\")\n    }\n    this.emit('}');\n  }\n\n  /** Returns the parameters passed to @IMPLEMENTS as the identifier's string values. */\n  private getImplementsDecorators(decorators: ts.NodeArray<ts.Decorator>): string[] {\n    var interfaces: string[] = [];\n    if (!decorators) return interfaces;\n    decorators.forEach((d) => {\n      if (d.expression.kind !== ts.SyntaxKind.CallExpression) return;\n      var funcExpr = <ts.CallExpression>d.expression;\n      if (base.ident(funcExpr.expression) !== 'IMPLEMENTS') return;\n      funcExpr.arguments.forEach((a) => {\n        var interf = base.ident(a);\n        if (!interf) this.reportError(a, '@IMPLEMENTS only supports literal identifiers');\n        interfaces.push(interf);\n      });\n    });\n    return interfaces;\n  }\n\n  private visitDecorators(decorators: ts.NodeArray<ts.Decorator>) {\n    if (!decorators) return;\n\n    var isAbstract = false;\n    decorators.forEach((d) => {\n      // Special case @CONST, @IMPLEMENTS, & @ABSTRACT\n      var name = base.ident(d.expression);\n      if (!name && d.expression.kind === ts.SyntaxKind.CallExpression) {\n        // Unwrap @CONST()\n        var callExpr = (<ts.CallExpression>d.expression);\n        name = base.ident(callExpr.expression);\n      }\n      // Make sure these match IGNORED_ANNOTATIONS below.\n      if (name === 'ABSTRACT') {\n        isAbstract = true;\n        return;\n      }\n      if (name === 'CONST' || name === 'IMPLEMENTS') {\n        // Ignore @IMPLEMENTS and @CONST - they are handled above in visitClassLike.\n        // TODO(martinprobst): @IMPLEMENTS should be removed as TS supports it natively.\n        return;\n      }\n      this.emit('@');\n      this.visit(d.expression);\n    });\n    if (isAbstract) this.emit('abstract');\n  }\n\n  private visitDeclarationMetadata(decl: ts.Declaration) {\n    this.visitDecorators(decl.decorators);\n    this.visitEachIfPresent(decl.modifiers);\n\n    // Temporarily deactivated to make migration of Angular code base easier.\n    return;\n\n    if (this.hasFlag(decl.modifiers, ts.NodeFlags.Protected)) {\n      this.reportError(decl, 'protected declarations are unsupported');\n      return;\n    }\n    var name = base.ident(decl.name);\n    if (!name) return;\n    var isPrivate = this.hasFlag(decl.modifiers, ts.NodeFlags.Private);\n    var matchesPrivate = !!name.match(/^_/);\n    if (isPrivate && !matchesPrivate) {\n      this.reportError(decl, 'private members must be prefixed with \"_\"');\n    }\n    if (!isPrivate && matchesPrivate) {\n      this.reportError(decl, 'public members must not be prefixed with \"_\"');\n    }\n  }\n\n  private visitNamedParameter(paramDecl: ts.ParameterDeclaration) {\n    this.visitDecorators(paramDecl.decorators);\n    if (paramDecl.type) {\n      // TODO(martinprobst): These are currently silently ignored.\n      // this.reportError(paramDecl.type, 'types on named parameters are unsupported');\n    }\n    this.visit(paramDecl.name);\n    if (paramDecl.initializer) {\n      if (paramDecl.initializer.kind !== ts.SyntaxKind.ObjectLiteralExpression ||\n          (<ts.ObjectLiteralExpression>paramDecl.initializer).properties.length > 0) {\n        this.reportError(paramDecl,\n                         'initializers for named parameters must be empty object literals');\n      }\n    }\n  }\n\n  /**\n   * Handles a function typedef-like interface, i.e. an interface that only declares a single\n   * call signature, by translating to a Dart `typedef`.\n   */\n  private visitFunctionTypedefInterface(name: string, signature: ts.SignatureDeclaration,\n                                        typeParameters: ts.NodeArray<ts.TypeParameterDeclaration>) {\n    this.emit('typedef');\n    if (signature.type) {\n      this.visit(signature.type);\n    }\n    this.emit(name);\n    if (typeParameters) {\n      this.emit('<');\n      this.visitList(typeParameters);\n      this.emit('>');\n    }\n    this.visitParameters(signature.parameters);\n    this.emit(';');\n  }\n}\n\nexport = DeclarationTranspiler;\n"],"sourceRoot":"/source/"}